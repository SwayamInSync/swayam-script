[
  {
    "objectID": "posts/Understanding Perplexity/index.html",
    "href": "posts/Understanding Perplexity/index.html",
    "title": "Understanding Perplexity",
    "section": "",
    "text": "Recently, I was diving into Chapter 5 (Pretraining) of the insightful book “Build a Large Language Model (From Scratch)” by Sebastian Raschka. While exploring the intricacies of language models, I stumbled upon an intriguing interpretation of perplexity. The author noted:\n\n“Perplexity is often considered more interpretable than the raw loss value because it signifies the effective vocabulary size about which the model is uncertain at each step.”\n\nIn simple words, If for some model the perplexity comes out to be \\(N\\) then it means that the model is \\(N\\) tokens uncertain about the correct next-token, it is considering all the \\(N\\) tokens as the potential candidate for the output token.\nThis statement resonated with me, as I had always viewed perplexity as just a performance metric. I began to wonder: can we mathematically derive this interpretation? Does the underlying math support this idea?\nLet’s delve into the equations and explore how perplexity relates to the model’s uncertainty about the next token in a sequence.\n\n\nIn language modeling, cross-entropy loss is a critical metric that helps us evaluate how well a model predicts the next token in a sequence. For a sequence of tokens \\(x = (x_1, x_2, ..., x_T)\\), the cross-entropy loss is calculated as:\n\\[\n\\mathcal{L} = - \\frac{1}{T} \\sum_{t=1}^{T} \\log P(x_t | \\mathbf{x}_{&lt;t})\n\\]\nwhere:\n\n\\(T\\) is the total number of tokens in the sequence.\n\n\n\\(P(x_t | \\mathbf{x}_{&lt;t})\\) is the predicted probability of the actual token \\(x_t\\) given the preceding context \\(\\mathbf{x}_{&lt;t}\\).\n\n This formulation averages the negative log-likelihood across all tokens, providing a measure of how well the model’s predictions align with the true tokens.\n\n\n\nPerplexity serves as a complementary metric to cross-entropy loss and is defined as the exponentiation of the loss:\n\\[\n\\text{Perplexity} = \\exp(\\mathcal{L})\n\\]\nThis formulation provides a more interpretable value, as it represents the effective number of choices the model considers when predicting the next token. A lower perplexity indicates higher confidence in predictions, while a higher perplexity signifies greater uncertainty.\n\n\n\n\n\n\nNote\n\n\n\nBefore going into maths, lets understand one thing\nIntuitively, for a completely uncertain model, selection for some next-token can be any from the whole vocabulary with each token having same probability of being the next token\n\n\n\n\n\nTo understand the interpretation of perplexity in terms of effective vocabulary size, let’s consider an extreme case where the model is completely uncertain about the next token. In this scenario, the model assigns equal probability to every token in the vocabulary of size \\(V\\). Thus, the probability of each token can be expressed as:\n\\[\nP(x_t | \\mathbf{x}_{&lt;t}) = \\frac{1}{V}\n\\]\nNow, substituting this uniform probability into the cross-entropy loss equation, we get:\n\\[\n\\mathcal{L} = - \\log P(x_t | \\mathbf{x}_{&lt;t}) = - \\log \\frac{1}{V} = \\log V\n\\]\nHere, \\(-\\log P(x_t | \\mathbf{x}_{&lt;t})\\) reflects the loss incurred for each token when the model is entirely uncertain.\n\n\n\nNext, we can use the perplexity formula to analyze this situation:\n\\[\n\\text{Perplexity} = \\exp(\\mathcal{L}) = \\exp(\\log V) = V\n\\]\nThis result reveals a fascinating insight: when the model is completely uncertain, the perplexity is exactly equal to the size of the vocabulary \\(V\\).\n\n\nNow, what does this mean in terms of interpretation? When the perplexity equals \\(V\\), it indicates that the model is effectively considering all \\(V\\) tokens as potential candidates for the next token, reflecting a state of maximum uncertainty.\nOn the other hand, if the model has a lower perplexity, say 100, it means that the model behaves as if it is uncertain only among 100 tokens. This aligns perfectly with the statement from Raschka’s book: perplexity signifies the effective vocabulary size about which the model is uncertain at each step."
  },
  {
    "objectID": "posts/Understanding Perplexity/index.html#cross-entropy-loss-a-quick-recap",
    "href": "posts/Understanding Perplexity/index.html#cross-entropy-loss-a-quick-recap",
    "title": "Understanding Perplexity",
    "section": "",
    "text": "In language modeling, cross-entropy loss is a critical metric that helps us evaluate how well a model predicts the next token in a sequence. For a sequence of tokens \\(x = (x_1, x_2, ..., x_T)\\), the cross-entropy loss is calculated as:\n\\[\n\\mathcal{L} = - \\frac{1}{T} \\sum_{t=1}^{T} \\log P(x_t | \\mathbf{x}_{&lt;t})\n\\]\nwhere:\n\n\\(T\\) is the total number of tokens in the sequence.\n\n\n\\(P(x_t | \\mathbf{x}_{&lt;t})\\) is the predicted probability of the actual token \\(x_t\\) given the preceding context \\(\\mathbf{x}_{&lt;t}\\).\n\n This formulation averages the negative log-likelihood across all tokens, providing a measure of how well the model’s predictions align with the true tokens."
  },
  {
    "objectID": "posts/Understanding Perplexity/index.html#defining-perplexity",
    "href": "posts/Understanding Perplexity/index.html#defining-perplexity",
    "title": "Understanding Perplexity",
    "section": "",
    "text": "Perplexity serves as a complementary metric to cross-entropy loss and is defined as the exponentiation of the loss:\n\\[\n\\text{Perplexity} = \\exp(\\mathcal{L})\n\\]\nThis formulation provides a more interpretable value, as it represents the effective number of choices the model considers when predicting the next token. A lower perplexity indicates higher confidence in predictions, while a higher perplexity signifies greater uncertainty.\n\n\n\n\n\n\nNote\n\n\n\nBefore going into maths, lets understand one thing\nIntuitively, for a completely uncertain model, selection for some next-token can be any from the whole vocabulary with each token having same probability of being the next token"
  },
  {
    "objectID": "posts/Understanding Perplexity/index.html#analyzing-the-uniform-distribution-case",
    "href": "posts/Understanding Perplexity/index.html#analyzing-the-uniform-distribution-case",
    "title": "Understanding Perplexity",
    "section": "",
    "text": "To understand the interpretation of perplexity in terms of effective vocabulary size, let’s consider an extreme case where the model is completely uncertain about the next token. In this scenario, the model assigns equal probability to every token in the vocabulary of size \\(V\\). Thus, the probability of each token can be expressed as:\n\\[\nP(x_t | \\mathbf{x}_{&lt;t}) = \\frac{1}{V}\n\\]\nNow, substituting this uniform probability into the cross-entropy loss equation, we get:\n\\[\n\\mathcal{L} = - \\log P(x_t | \\mathbf{x}_{&lt;t}) = - \\log \\frac{1}{V} = \\log V\n\\]\nHere, \\(-\\log P(x_t | \\mathbf{x}_{&lt;t})\\) reflects the loss incurred for each token when the model is entirely uncertain."
  },
  {
    "objectID": "posts/Understanding Perplexity/index.html#connecting-loss-and-perplexity",
    "href": "posts/Understanding Perplexity/index.html#connecting-loss-and-perplexity",
    "title": "Understanding Perplexity",
    "section": "",
    "text": "Next, we can use the perplexity formula to analyze this situation:\n\\[\n\\text{Perplexity} = \\exp(\\mathcal{L}) = \\exp(\\log V) = V\n\\]\nThis result reveals a fascinating insight: when the model is completely uncertain, the perplexity is exactly equal to the size of the vocabulary \\(V\\).\n\n\nNow, what does this mean in terms of interpretation? When the perplexity equals \\(V\\), it indicates that the model is effectively considering all \\(V\\) tokens as potential candidates for the next token, reflecting a state of maximum uncertainty.\nOn the other hand, if the model has a lower perplexity, say 100, it means that the model behaves as if it is uncertain only among 100 tokens. This aligns perfectly with the statement from Raschka’s book: perplexity signifies the effective vocabulary size about which the model is uncertain at each step."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Swayam’s Scripts",
    "section": "",
    "text": "Understanding Perplexity\n\n\nA New Perspective on Model Uncertainty\n\n\n\nLLM\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nSwayam Singh\n\n\n3 min\n\n\n600 words\n\n\n\n\n\n\n\n\n\n\n\n\nSelf-Attention Mimicking Gradient Descent\n\n\n\n\n\n\nNLP\n\n\nTransformers\n\n\n\n\n\n\n\n\n\nOct 14, 2023\n\n\nSwayam Singh\n\n\n9 min\n\n\n1,671 words\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Self-Attention Mimicking Gradient Descent/index.html",
    "href": "posts/Self-Attention Mimicking Gradient Descent/index.html",
    "title": "Self-Attention Mimicking Gradient Descent",
    "section": "",
    "text": "Self-Attention Mimicking Gradient Descent\n\n\n\nThis section of paper Uncovering mesa-optimization algorithms in Transformers presents a theoretical construction where a linear self-attention layer in a Transformer architecture can mimic a single step of gradient descent for a linear regression task.\n\nToken Construction (from the paper):\n\n\nTokens: A set of tokens \\(E_T\\) is constructed with \\(T = N\\) such that \\(e_t = (y_{\\tau,i}, x_{\\tau,i})\\), where \\(y_{\\tau,i}\\) and \\(x_{\\tau,i}\\) are concatenated.\nQuery Token: A query token \\(e_{T+1}\\) is created as \\(e_{T+1} = (-W_0 x_{\\tau,\\text{test}}, x_{\\tau,\\text{test}})\\) . This token represents the test input for which a prediction is to be made.\n\n\nWhy doing \\(-W_0 x_{\\tau,\\text{test}}\\) ? \\(W_o\\) represent the model’s initial weights, multiplying it with \\(x_{\\tau,\\text{test}}\\) provides initial context for prediction (basically giving a perspective to start with). The \\(-_(ve)\\) sign is to align with the GD update, where we move in the direction opposite to the gradient. So we can say that The initial negative prediction in the query token provides a starting point, and the self-attention mechanism’s update to this prediction results in a new prediction that mimics\n\n\n\nConditions (from the paper):\n\n\nAll bias terms are zero\n\nbasically only using the model weights without any bias term\n\n\\[\nW^T_k W_q = \\begin{bmatrix} 0 & 0 \\\\ 0 & I_x \\end{bmatrix}\n\\]\n\nAs per my understanding, the relevance of this condition depends is as following\n\nSo, I’ll write the equations for calculating attention weights and they are self-explanatory to be honest (also this is my fav interpretation of this condition)\n\\[\ne = \\begin{bmatrix} y_1 \\\\ x_1 \\\\ x_2 \\end{bmatrix} \\\\\n\\text{ and }q = \\begin{bmatrix} q_y \\\\ q_{x1} \\\\ q_{x2} \\end{bmatrix}\n\\]\n\\[k = W_k e\\]\n\\[q' = W_q q\\]\n\\[\\text{attention weight} \\propto k^T q'\\]\nGiven the condition, this becomes: \\[\\text{weight} \\propto e^T W^T_k W_q q\\]\nNow, plugging in the condition\n\\[W^T_k W_q = \\begin{bmatrix} 0 & 0 \\\\ 0 & I_x \\end{bmatrix}\\]\nthe interaction simplifies to: \\[\n\\text{weight} \\propto \\begin{bmatrix} y_1 & x_1 & x_2 \\end{bmatrix} \\begin{bmatrix} 0 & 0 & 0 \\\\ 0 & 1 & 0\\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} q_y \\\\ q_{x1} \\\\ q_{x2} \\end{bmatrix}\n\\] \\[\n\\text{weight} \\propto \\begin{bmatrix} 0 & x_1 & x_2 \\end{bmatrix} \\begin{bmatrix} q_y \\\\ q_{x1} \\\\ q_{x2} \\end{bmatrix}\n\\] \\[\\text{weight} \\propto x_1 q_{x1} + x_2 q_{x2}\\]\nSo what we can see here is that, the attention-weights are proportional to the dot-product of x-component of inputs and query (rejecting the influence of y-component)\n\n\\[ P W_v = \\begin{bmatrix} -\\eta I_y & \\eta W_0 \\\\ 0 & 0 \\end{bmatrix}\\]\n\nThis is the another condition and lets try to understand what it means, here \\(\\eta\\) is the learning-rate, \\(*P*\\) is a projection matrix, and \\(*W_v*\\) is the weight matrix for the “values”.\nBefore diving into the interpretation of this condition, we should know that the Linear Self Attention can be represented as \\(P V_{t} K^T_{t} q_{t}\\) (considering 1 head for simplicity) here \\(P\\) is just the Projection matrix and the rest of the term is exact same as calculating attention.\nThe matrix product \\(PW_v\\) determines how the values contribute to the updated query token. Now lets try to understand it\nIn this interpretation, I’ll again try to resolve this by solving equations, since our new value_matrix is \\(PW_v\\) i.e we can calculate values of input token as\n\\[v = PW_ve\\]\nwhere \\(e = \\begin{bmatrix} y_1 \\\\ x_1 \\\\ x_2 \\end{bmatrix}\\) and \\(P W_v = \\begin{bmatrix} -\\eta & \\eta W_{01} & \\eta W_{02} \\\\ 0 & 0 & 0\\\\ 0 & 0 & 0\\end{bmatrix}\\)\n\\[v = -\\eta y + \\eta W_{01}x_1 +\\eta W_{02}x_2\\]\nBased on this equation we can interpret the condition as:\n\nThe Upper Left Block \\((-\\eta I_y)\\): This block scales the y-component of the values (the outputs) by −η. In the context of gradient descent, the update is proportional to the negative gradient. This block captures the idea that the update to our model’s prediction should be in the opposite direction of the error (difference between prediction and actual output). Multiplying by −η ensures that if our model’s prediction is too high, it gets adjusted downwards, and if it’s too low, it gets adjusted upwards.\nThe Upper Right Block (\\(\\eta W_0\\)): This block scales the x-component of the values (the inputs) and then multiplies by the initial weight \\(*W_0\\).* This captures the contribution of the inputs to the gradient of the loss with respect to the model parameters. In other words, it represents how much each input feature contributes to the error. Multiplying by \\(*W_0*\\) gives the model’s initial reliance on each feature, and the entire product indicates how the model should adjust its reliance on each feature to minimize the error.\nThe Lower Blocks (0 matrices): These blocks ensure that the x-component of the updated query token remains unchanged. This is consistent with the idea that the input part of our test example doesn’t change; only our model’s prediction (or representation) of it does.\n\n\nThat covers all the required conditions, now let’s see that satisfying these conditions, how the weights of the self-attention will contain the gradient of the loss of a Linear Regression objective.\n\n\nGradient Descent in Linear Regression:\n\nFor a linear regression task, the gradient descent update rule is: \\[\\Delta W_0 = \\eta \\sum_{i=1}^{N} (y_{\\tau,i} - W_0 x_{\\tau,i}) x^T_{\\tau,i}\\]\n\n\nLinear Self-Attention Layer:\n\nGiven the conditions, the self-attention mechanism computes the weighted sum of values based on the similarity (dot product) of the query with the keys.\nTo prove: The weights in the attention mechanism will effectively compute the gradient of the loss with respect to the model parameters.\nLet’s move to the final derivation:\n\nAttention Weights Calculation: Given the second condition, the attention weights are determined by the dot product of the query with the keys: \\[\\alpha_t = q \\cdot k_t\\] Where \\(q\\) is the query, and \\(k_t\\) is the key for the t-th token.\nValue Update: The update to the query token using the attention mechanism is: \\[e_{T+1,\\text{new}} = \\sum_{t=1}^{T} \\alpha_t v_t\\] Where \\(v_t\\) is the value for the t-th token.\n\nGiven the third condition, the value for each token is: \\[v_t = P W_v e_t\\] Substituting this in, we get: \\[e_{T+1,\\text{new}} = \\sum_{t=1}^{T} \\alpha_t P W_v e_t\\]\nMatching with Gradient Descent: Given the attention weights \\((\\alpha_t)\\) and the gradient descent update rule, the y-component of the updated query token is: \\[\ne_{T+1,\\text{new,y}} = \\sum_{t=1}^{T} \\alpha_t (-\\eta y_{\\tau,i} + \\eta W_0 x_{\\tau,i}) \\\\\ne_{T+1,\\text{new,y}} = \\sum_{t=1}^{T} \\alpha_t \\eta (W_0 x_{\\tau,i} - y_{\\tau,i})\n\\]\nNow, comparing this with the gradient descent update rule, we can see that the term inside the summation \\((W_0x_τ,_iy_τ,_i)\\) is essentially the error in prediction for the training data.\nGiven that the attention weights \\(α_t\\) effectively compute a weighted version of this error, the entire equation can be seen as a weighted sum of errors, which is analogous to the gradient in gradient descent.\n\n\nApproximation:\n\nNow, for the test input \\(x_{\\tau,\\text{test}}\\), the prediction using the initial weights \\(W_0\\) is \\(W_0 x_{\\tau,\\text{test}}\\). After one step of gradient descent, the prediction becomes: \\[(W_0 - \\Delta W_0) x_{\\tau,\\text{test}}\\]\nGiven that the self-attention mechanism’s update to the query token is designed to mimic one step of gradient descent, we can approximate: \\[e_{T+1,\\text{new,y}} \\approx (W_0 - \\Delta W_0) x_{\\tau,\\text{test}}\\]\nThis approximation captures the essence of the theoretical construction: the self-attention mechanism updates the query token in a way that mimics the behavior of gradient descent\nAlso the rearrangement and approximation are based on the insight that the self-attention mechanism’s update to the query token aligns with the gradient descent update rule for linear regression, allowing the mechanism to make predictions consistent with gradient descent optimization."
  }
]